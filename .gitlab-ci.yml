---
build linux:
    tags: [dev-utils]
    stage: build
    cache: { key: "${CI_JOB_NAME}", paths: [".cargo", "target"] }
    script:
        - cargo build --release --target=x86_64-unknown-linux-musl
        - cp ./target/x86_64-unknown-linux-musl/release/puff ./puff
    artifacts: { paths: ["./puff"], expire_in: 1 hour }

build windows:
    tags: [dev-utils2]
    stage: build
    cache: { key: "${CI_JOB_NAME}", paths: [".cargo", "target"] }
    script:
        - cargo build --release --target=x86_64-pc-windows-gnu
        - cp ./target/x86_64-pc-windows-gnu/release/puff.exe ./puff.exe
    artifacts: { paths: ["./puff.exe"], expire_in: 1 hour }

test linux:
    tags: [dev-utils]
    stage: test
    allow_failure: true
    cache: { key: "${CI_JOB_NAME}", paths: [".cargo", "target"] }
    script:
        - cargo test #-- -Z unstable-options --format json --report-time | cargo2junit > results.xml
#    artifacts:
#        when: always
#        reports:
#            junit: ./results.xml

package debian:
    tags: [dev-utils]
    stage: package
    needs:
        - job: build linux
          artifacts: true
    script:
        - cargo deb --target x86_64-unknown-linux-musl
        - cp ./target/x86_64-unknown-linux-musl/debian/puff*.deb ./puff.deb

    artifacts: { paths: ["./puff.deb"], expire_in: 1 hour }

package arch:
    tags: [dev-utils]
    stage: package
    needs:
        - job: build linux
          artifacts: true
    script:
        - mkdir arch_package_$CI_PROJECT_TITLE
        - cp puff arch_package_$CI_PROJECT_TITLE/
        - cp PKGBUILD arch_package_$CI_PROJECT_TITLE/
        - cp -r arch_package_$CI_PROJECT_TITLE/ /tmp/
        - cd /tmp/arch_package_$CI_PROJECT_TITLE
        - chown -R nobody .
        - runuser -u nobody -- makepkg -g >> PKGBUILD
        - runuser -u nobody -- makepkg
        - cp *.pkg.tar.zst ${CI_PROJECT_DIR}/
        - rm -rf /tmp/arch_package_$CI_PROJECT_TITLE
    artifacts: 
        paths: 
            - ${CI_PROJECT_DIR}/*.pkg.tar.zst
        expire_in: 1 hour 

deploy debian:
    tags: [dev-utils]
    stage: deploy
    needs:
        - job: package debian
          artifacts: true
    script:
        - DEB_NAME=puff-$CI_COMMIT_TIMESTAMP-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        - echo $DEB_NAME
        - curl -u $ARTIFACTORY_USER:$ARTIFACTORY_REFERENCE_KEY -XPUT "http://192.168.18.15:8081/artifactory/radar-local-repo/pool/${DEB_NAME}.deb;deb.distribution=astra;deb.component=main;deb.architecture=amd64" -T *.deb

#build aarch64:
#    tags: [dev-utils]
#    stage: build
#    allow_failure: true
#    cache:
#        key: "${CI_JOB_NAME}"
#        paths:
#            - .cargo
#            - target
#    before_script:
#        - cargo --version
#
#    script:
#        - cargo build --release --target=aarch64-unknown-linux-gnu
#        - cp ./target/aarch64-unknown-linux-gnu/release/poppy ./poppy
#
#    artifacts:
#        paths:
#            - ./poppy
#        expire_in: 1 hour
#
#build windows:
#    tags: [dev-utils]
#    stage: build
#    allow_failure: true
#    cache:
#        key: "${CI_JOB_NAME}"
#        paths:
#            - .cargo
#            - target
#    before_script:
#        - cargo --version
#    script:
#        - cargo build --release --target x86_64-pc-windows-gnu
#        - cp ./target/x86_64-pc-windows-gnu/release/poppy.exe ./poppy.exe
#
#    artifacts:
#        paths:
#            - ./poppy.exe
#        expire_in: 1 hour
#
#
#push-artifactory:
#    tags: [dev-utils]
#    stage: push
#    needs:
#        - job: package
#          artifacts: true
#    rules:
#        - if: $CI_PIPELINE_SOURCE == "trigger-install-alse"
#          when: always
#        - if: '$CI_COMMIT_TAG'
#          when: always
#        - when: manual
#    before_script:
#        - echo ${ARTIFACTORY_REFERENCE_KEY}
#    script:
#        - chmod +x ./poppup.py
#        - ./poppup.py --push --file=./poppy.tar.gz --name=poppy --arch=linux-x64 --user=gitlab_ci --token=${ARTIFACTORY_REFERENCE_KEY}
#
#install-alse-1:
#    tags: [alse-first]
#    stage: install-runners
#    needs:
#        - job: push-artifactory
#          artifacts: true
#    rules:
#        - if: $CI_PIPELINE_SOURCE == "trigger-install-alse"
#          when: always
#        - if: '$CI_COMMIT_TAG'
#          when: always
#        - when: manual
#    before_script:
#        - pip3 install requests
#    script:
#        - python3 poppup.py --install-latest --arch=linux-x64 --user=gitlab_ci --token=${ARTIFACTORY_REFERENCE_KEY}
#        - poppy --version
#        - poppy -u gitlab_ci -t ${ARTIFACTORY_REFERENCE_KEY} install --list-registry
#
#install-alse-2:
#    tags: [alse-second]
#    stage: install-runners
#    rules:
#        - if: $CI_PIPELINE_SOURCE == "trigger-install-alse"
#          when: always
#        - if: '$CI_COMMIT_TAG'
#          when: always
#        - when: manual
#    needs:
#        - job: push-artifactory
#          artifacts: true
#    before_script:
#        - pip3 install requests
#    script:
#        - python3 poppup.py --install-latest --arch=linux-x64 --user=gitlab_ci --token=${ARTIFACTORY_REFERENCE_KEY}
#        - poppy --version
#        - poppy -u gitlab_ci -t ${ARTIFACTORY_REFERENCE_KEY} install --list-registry
#
#install-windows-1:
#    tags: [windows-first]
#    stage: install-runners
#    rules:
#        - if: $CI_PIPELINE_SOURCE == "trigger-install-windows"
#          when: always
#        - if: '$CI_COMMIT_TAG'
#          when: always
#        - when: manual
#    needs:
#        - job: push-artifactory
#          artifacts: true
#    script:
#        - python3 poppup.py --install-latest --arch=windows-x64 --user=gitlab_ci --token=${ARTIFACTORY_REFERENCE_KEY}
#        - poppy --version
#        - poppy -u gitlab_ci -t ${ARTIFACTORY_REFERENCE_KEY} install --list-registry
#
#install-windows-2:
#    tags: [windows-second]
#    stage: install-runners
#    rules:
#        - if: $CI_PIPELINE_SOURCE == "trigger-install-windows"
#          when: always
#        - if: '$CI_COMMIT_TAG'
#          when: always
#        - when: manual
#    needs:
#        - job: push-artifactory
#          artifacts: true
#    script:
#        - python3 poppup.py --install-latest --arch=windows-x64 --user=gitlab_ci --token=${ARTIFACTORY_REFERENCE_KEY}
#        - poppy --version
#        - poppy -u gitlab_ci -t ${ARTIFACTORY_REFERENCE_KEY} install --list-registry
#
#install-dev-utils:
#    tags: [dev-utils]
#    stage: install-runners
#    rules:
#        - if: $CI_PIPELINE_SOURCE == "trigger-install-windows"
#          when: always
#        - if: '$CI_COMMIT_TAG'
#          when: always
#        - when: manual
#    needs:
#        - job: push-artifactory
#          artifacts: true
#    script:
#        - python3 poppup.py --install-latest --arch=windows-x64 --user=gitlab_ci --token=${ARTIFACTORY_REFERENCE_KEY}
#        - poppy --version
#        - poppy -u gitlab_ci -t ${ARTIFACTORY_REFERENCE_KEY} install --list-registry


stages:
    - build
    - test
    - install
    - package
    - deploy
    - install-runners
    
