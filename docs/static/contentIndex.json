{"first-steps":{"title":"Начало работы","links":[],"tags":[],"content":"В этой части будет краткая инструкция по тому, как создать свой пакет с использованием пакетного менеджера puff, добавить ему зависимость в виде библиотеки и скомпилировать код.\nДля того, чтобы создать пакет, необходимо в директории с проектом создать файл манифеста и файл рецепта.\nМанифест - это описание нашего пакета и его зависимостей.\nРецепт - это описание шагов, необходимых для сборки этого пакета. Для сборки этого проекта нам не потребуется рецепт, так как мы не планируем его публиковать.\nМанифест\nСоздадим в корне CMake-проекта файл Puff.toml рядом с файлом CMakeLists.txt так, чтобы получилась следующая структура папок:\nsrc \n└── c++ \nCMakeLists.txt \nPuff.toml\n\nМанифест обычно содержит 3 секции:\n\nСекция [this], в которой описан сам пакет, а именно:\n\nname - имя пакета (обязательно)\nversion - версия пакета (обязательно)\ndescription - краткое описание пакета\nauthors - список авторов пакета в виде массива строк, разделенных запятой\nlicense - лицензия, по которой поставляется исходный код\n\n\nСекция [needs], в которой описаны зависимости пакета от других пакетов Puff. Она может быть пустой, или и вовсе отсутствовать.\nСекция [build], в которой описаны зависимости сборки (также опциональная).\n\nПример манифеста с использованием всех возможностей контроля версий:\n[this]\nname = &quot;example&quot;\nversion = &quot;0.1.0&quot;\ndescription = &quot;Example parcel for example project!&quot; # optional\nauthors = [                                         # optional\n\t&quot;whs31 &lt;whs31@github.io&gt;&quot;,\n\t&quot;example_author &lt;example@example.com&gt;&quot;\n]\nlicense = &quot;MIT&quot;                                     # optional\n# this is also optional!\n[needs]  \nfmt = &quot;10.0.0&quot;               # shared is by default...\nspdlog = &quot;1.0.63@static&quot;     # ...but you can override it!\nkfr = &quot;0.0.1&quot;                # if newer version exists, it will use it\nmagicenum = &quot;=1.0.15@static&quot; # if 1.0.15 static is not found in registries \n                             # or cannot be built, error will be thrown!\n                             \n# what package needs to be built (optional)\n[build]\ng++ = &quot;11.0.0&quot;\ngcc = &quot;11.0.0&quot;\ncmake = &quot;3.15.0&quot;             # 3.15.0 or higher\ngtest = &quot;any&quot;                # any found version is OK\nЗаполним свой манифест-файл необходимыми полями:\n[this]\nname = &quot;hello_world&quot;\nversion = &quot;1.0.0&quot;\nauthors = [ &quot;me &lt;me@local&gt;&quot; ]\ndescription = &quot;Example showcase project&quot;\nТеперь добавим в манифест зависимость от библиотеки fmt для примера:\n[needs]\nfmt = &quot;^10.0.0@shared&quot;\nГотово! Манифест полностью настроен.\nУстановка зависимостей\nДля того, чтобы из манифеста установить необходимые библиотеки, нужно запустить команду puff install, в которую передается путь к папке, содержащей манифест (Puff.toml):\npuff install . --fresh\n\nАргумент --fresh сообщает, что любые старые зависимости будут удалены перед установкой новых. Рекомендуется указывать его при установке зависимостей.\n\nГотово! Зависимости установились в папку dependencies в корне проекта.\nСборка проекта\nСборка проекта с пакетным менеджером отличается только одним аргументом: необходимо передать задать путь для поиска библиотек равным dependencies:\ncmake -S . -B target -DCMAKE_PREFIX_PATH=&quot;dependencies&quot;"},"index":{"title":"Puff - пакетный менеджер","links":["installation","remotes","first-steps","recipes"],"tags":["puff","c","cxx","rust","cargo","cmake"],"content":"\nPuff - это пакетный менеджер для C/C++ в связке с системой сборки CMake. Puff позволяет автоматически скачивать, компилировать и публиковать распостраняемые пакеты и библиотеки, загружая их в выбранный реестр Artifactory.\nОтличия от аналогов\n\nvcpkg\n\nПозволяет поставлять пакеты не только в виде исходного кода, но и в виде уже собранных бинарных файлов;\nТакже Puff использует более удобный синтаксис TOML вместо JSON;\nПозволяет иметь несколько реестров с пакетами одновременно.\n\n\nconan\n\nИспользует YAML-файлы для рецептов, что позволяет сгладить кривую обучения для написания собственных пакетов;\nНе имеет зависимости на Python;\nНе требует изучения нового языка, предоставляя интуитивно понятные инструменты для работы с пакетами;\nРаботает быстрее за счет того, что написан на Rust.\n\n\n\nРазделы\nНачало\n\nУстановка пакетного менеджера в систему\nНастройка удаленного репозитория\nПервые шаги\n\nПродвинутые техники\n\nРецепты\n"},"installation":{"title":"Установка","links":[],"tags":[],"content":"Универсальный способ\n\nНеобходимо установить Rust и Cargo:\n\nДля ОС Windows: ссылка\nДля OC Linux (любой дистрибутив): ввести следующую команду\n\n\n\ncurl --proto &#039;=https&#039; --tlsv1.2 -sSf sh.rustup.rs | sh\n\nНеобходимо добавить кастомный репозиторий Cargo. Для этого необходимо создать/отредактировать файл конфигурации Cargo, который находится по следующему пути:\n\nДля ОС Windows: C:\\Users\\&lt;user&gt;\\.cargo\\config.toml\nДля ОС Linux: ~\\.cargo\\config.toml\nВ файл необходимо записать следующее содержимое:\n\n\n\n[registry]\nglobal-credential-providers = [&quot;cargo:token&quot;]\n \n[registries.artifactory]\nindex = &quot;sparse+uav.radar-mms.com/artifactory/api/cargo/cargo-main/index/&quot;\n\nДля репозитория необходимо добавить аутентификацию. Для этого создаем/редактируем файл credentials.toml, который лежит рядом с вышеуказанным config.toml. В файле должно быть следующее содержимое:\n\n[registries.artifactory]\ntoken = &quot;Bearer ВАШ_ТОКЕН&quot;\nВАШ_ТОКЕН нужно заменить на действительный токен Artifactory.\n4. Выполняем команду:\ncargo install puff --registry &quot;artifactory&quot;   \nГотово! Пакетный менеджер установлен в систему. Проверить его версию можно командой:\npuff --version\nDebian Linux (Ubuntu, Mint, Debian, Astra)\nДля ОС на основе Debian доступна установка через пакетный менеджер apt.\nДля этого выполняем следующую команду:\ncurl gist.githubusercontent.com/whs31/635f4331a5d668f83e8de9e830fbb54d/raw/5002a84bf0b01337791173c7e9d5244aeabe7e04/debian-local.pub -O debian-local.pub \nsudo apt-key add debian-local.pub \necho &#039;deb http://ИМЯ_ПОЛЬЗОВАТЕЛЯ:ТОКЕН@213.170.107.251/artifactory/radar-local-repo astra main&#039;&gt;&gt;/etc/apt/sources.list \nsudo apt update\nsudo apt install -y puff\npuff --version\nПоля ИМЯ_ПОЛЬЗОВАТЕЛЯ и ТОКЕН необходимо заменить на актуальные данные для аутентификации в Artifactory.\nArch Linux (Arch, Manjaro, EndeavourOS)\ntodo =)\nСборка вручную\n\nНеобходимо установить Rust: ссылка\nСклонировать репозиторий с пакетным менеджером через Git, либо скачать архив с исходным кодом\nЗапустить в корневой папке репозитория команду:\ncargo build --release\n\nВ папке target/release появится исполняемый файл с названием puff.exe. Его необходимо поместить в директорию, находящуюся в системном PATH. Подробнее для Windows: ссылка\nТеперь в терминале можно запустить команду puff --version. Ожидаемый вывод:\n\n"},"recipes":{"title":"Рецепты","links":[],"tags":[],"content":"Для того, чтобы пакет мог собираться в дереве зависимостей автоматически, ему нужен рецепт сборки (.puff/recipe.yml)\nЧто должен делать рецепт:\n\nСобирать пакет, если требуется (в любой папке);\nУстанавливать или копировать все необходимое в папку target/export в корне пакета.\nПример структуры папок для CMake-проекта:\n\n. \n├── [ *sources* ] \n├── .puff \n│ └── recipe.yml\n├── CMakeLists.txt \n├── Puff.toml \n└── target \n\t├── [ *build artifacts* ] \n\t└── export \n\t\t└── [ *exported files* ]\n\nПример структуры папок для проекта без CMake:\n. \n├── [ *sources* ] \n├── .puff \n│ └── recipe.yml\n├── Puff.toml \n└── target \n\t└── export \n\t\t└── [ *exported files* ]\n"},"remotes":{"title":"Удаленные репозитории","links":[],"tags":[],"content":"Для того, чтобы подключать сторонние библиотеки и публиковать свои, необходимо подключить удаленный репозиторий.\nЭто делается командой puff registry add &lt;...&gt;.\nВ нее необходимо передать:\n\n--name - имя удаленного репозитория\n--url - ссылка на репозиторий без имени\n--username - имя пользователя для аутентификации (если требуется аутентификация)\n--token - токен для аутентификации (если требуется аутентификация)\n--pattern - паттерн лейаута пакетов в репозитории (опционально)\n\nВсе это можно узнать, кликнув на репозиторий в Artifactory:\n\nДля того, чтобы узнать токен, необходимо в той же вкладке кликнуть на кнопку Set me up, затем проследовать по дальнейшим инструкциям:\n\nЗатем необходимо ввести вышеуказанную команду с правильными аргументами, например:\npuff registry add --name &quot;puff-main&quot; --url &quot;uav.radar-mms.com/artifactory&quot; -u whs31 -t &quot;$ARTIFACTORY_REF_TOKEN&quot;\nГотово! Удаленный репозиторий добавлен и доступен для загрузки пакетов."}}